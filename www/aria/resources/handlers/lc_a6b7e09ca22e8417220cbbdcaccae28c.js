/*
 * Copyright Amadeus
 */
//***MULTI-PART
//MCylagYg2Y
//LOGICAL-PATH:aria/resources/handlers/LCResourcesHandler.js
//MCylagYg2Y
(function(){var o,m,n;Aria.classDefinition({$classpath:"aria.resources.handlers.LCResourcesHandler",$implements:["aria.resources.handlers.IResourcesHandler"],$dependencies:["aria.utils.String","aria.resources.handlers.LCResourcesHandlerBean"],$statics:{SUGGESTION_BEAN:"aria.resources.handlers.LCResourcesHandlerBean.Suggestion",CONFIGURATION_BEAN:"aria.resources.handlers.LCResourcesHandlerBean.Configuration",INVALID_CONFIG:"Invalid handler configuration in : %1.",INVALD_SUGGESTION_TYPE:"Suggestions must be an array.",
INVALID_SUGGESTIONS:"Suggestions does not match suggestion bean aria.resources.handlers.LCResourcesHandleBean.Suggestions",INVALID_KEYCODE:"Suggestions does not match labelKey or codeKey"},$constructor:function(a){this.threshold=1;this.codeExactMatch=true;this.boundaryRegex=/\s+/g;this.__islabelCode=this._labelMatchAtWordBoundaries=false;this._suggestions=[];this._options={labelKey:"label",codeKey:"code"};if(a)if(o.check(a,this.CONFIGURATION_BEAN)){this.codeExactMatch=a.codeExactMatch?true:a.codeExactMatch;
this.threshold=a.threshold||1;this._labelMatchAtWordBoundaries=!!a.labelMatchAtWordBoundaries;this._options.labelKey=a.labelKey||"label";this._options.codeKey=a.codeKey||"code";this._options.sortingMethod=a.sortingMethod;this.__islabelCode=this._options.labelKey==="label"&&this._options.codeKey==="code"}else this.$logError(this.INVALID_CONFIG,[this.$classpath])},$destructor:function(){this._suggestions=null},$onload:function(){o=aria.core.JsonValidator;m=aria.utils.String;n=aria.utils.Type},$onunload:function(){n=
m=o=null},$prototype:{getSuggestions:function(a,d){if(n.isString(a)&&a.length>=this.threshold){a=m.stripAccents(a).toLowerCase();var b=[],g=[],f=[],h=this._suggestions.length,e=a.length,i=this._labelMatchAtWordBoundaries,j,c;for(j=0;j<h;j++){c=this._suggestions[j];if(c.code===a){c.original.exactMatch=true;b.unshift(c.original)}else if(c.code.substring(0,e)===a&&!this.codeExactMatch){b.push(c.original);c.original.exactMatch=false}else for(var p=i?c.wordBoundaries:[0],k=0,q=p.length,l;k<q;k++){l=p[k];
if(c.label.substring(l,l+e)===a){p=c.label===a;k=(l=l===0)?g:f;c.original.multiWordMatch=!l;(c.original.exactMatch=p)?k.unshift(c.original):k.push(c.original);break}}}b=b.concat(g).concat(f);this.$callback(d,b)}else this.$callback(d,null)},getDefaultTemplate:function(){return"aria.widgets.form.list.templates.LCTemplate"},setSuggestions:function(a){if(n.isArray(a)){var d=[],b=this._options.labelKey,g=this._options.codeKey;this._options.sortingMethod&&n.isFunction(this._options.sortingMethod)?a.sort(this._options.sortingMethod):
a.sort(function(j,c){return j[b]<c[b]?1:j[b]>c[b]?-1:0});for(var f=0,h=a.length;f<h;f++){var e=a[f],i={};if(this.__islabelCode&&!o.check(e,this.SUGGESTION_BEAN))return this.$logError(this.INVALID_SUGGESTIONS,null,a);else if(!(e.hasOwnProperty(b)&&e.hasOwnProperty(g)))return this.$logError(this.INVALID_KEYCODE,null,a);i.label=e[b];i.code=e[g];e={label:m.stripAccents(i.label).toLowerCase(),code:m.stripAccents(i.code).toLowerCase(),original:i};if(this._labelMatchAtWordBoundaries)e.wordBoundaries=this.__getWordBoundaries(e.label);
d.push(e)}this._suggestions=d}else return this.$logError(this.INVALD_SUGGESTION_TYPE,null,a)},setThreshold:function(a){this.threshold=a},suggestionToLabel:function(a){return a.label},getAllSuggestions:function(a){for(var d=this._suggestions,b=d.length,g=[],f,h=0;h<b;h++){f=d[h];g.push(f.original)}this.$callback(a,g)},__getWordBoundaries:function(a){for(var d=this.boundaryRegex,b=[0];d.exec(a)!==null;)b.push(d.lastIndex);d.lastIndex=0;return b}}})})();
//MCylagYg2Y
//LOGICAL-PATH:aria/resources/handlers/LCResourcesHandlerBean.js
//MCylagYg2Y
Aria.beanDefinitions({$package:"aria.resources.handlers.LCResourcesHandlerBean",$description:"Definition of the suggestions used in the LC resource handler",$namespaces:{base:"aria.widgets.form.AutoCompleteBean",json:"aria.core.JsonTypes"},$beans:{Suggestion:{$type:"base:Suggestion",$description:"A Label-Code suggestion",$restricted:false,$properties:{label:{$type:"json:String",$description:"label for this suggestion",$sample:"Paris",$mandatory:true},code:{$type:"json:String",$description:"A code matching this suggestion",
$sample:"PAR"}}},Configuration:{$type:"json:Object",$description:"Configuration Object for Suggestions",$restricted:false,$properties:{labelKey:{$type:"json:String",$description:"Any label key for suggestions",$sample:"myLabel",$default:"label"},codeKey:{$type:"json:String",$description:"Any code key for suggestions",$sample:"myCode",$default:"code"},sortingMethod:{$type:"json:FunctionRef",$description:"An anonymous function for sorting the suggestions list"},codeExactMatch:{$type:"json:Boolean",
$description:"If code has to be matched exactly to return the suggestion",$default:false},labelMatchAtWordBoundaries:{$type:"json:Boolean",$description:"Whether to try starting the search for the match on all word boundaries in the multi-word label, or only from the beginning of the label",$default:false},threshold:{$type:"json:Integer",$description:"Minimum number of letters typed to return suggestions",$default:1}}}}});